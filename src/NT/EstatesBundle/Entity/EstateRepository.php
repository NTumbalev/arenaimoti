<?php
/**
 * This file is part of the NTEstatesBundle.
 *
 * (c) Nikolay Tumbalev <n.tumbalev@nt.bg>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace NT\EstatesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use NT\PublishWorkflowBundle\PublishWorkflowQueryBuilderTrait;
/**
 * Custom methods for working with Entity
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package NTEstatesRepository
 * @author  Nikolay Tumbalev <n.tumbalev@nt.bg>
 */
class EstateRepository extends EntityRepository
{
    use PublishWorkflowQueryBuilderTrait;

    /**
     * Find all by locale
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findAllByLocale($locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->setMaxResults($limit)
            ->setFirstResult($offset);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Find one news by slug and locale
     * @var string $slug
     * @var string $locale
     * @return array
     */
    public function findOneBySlugAndLocale($slug, $locale)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder(null);
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug = :slug')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('slug', $slug)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime());
        $query = $qb->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Find all by category and locale
     * @var estateCategoryId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findAllByCategoryAndLocale($estateCategoryId, $locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.estateCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('cat.id = :estateCategoryId')
            ->setParameter('estateCategoryId', $estateCategoryId)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Query for estates listing
     * @var estateCategoryId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function getEstatesListingQuery($estateCategoryId, $locale, $page, $pageSize)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder(null);
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.estateCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('c.type = :sell')
            ->andWhere('t.slug IS NOT NULL');
            if ($estateCategoryId != null) {
                $qb
                ->andWhere('cat.id = :estateCategoryId')
                ->setParameter('estateCategoryId', $estateCategoryId)
                ;
            }
        $qb
            ->setParameter('sell', 'sell')
            ->setParameter('locale', $locale)
            ->orderBy('c.createdAt', 'DESC')
            ->setFirstResult($pageSize * ($page-1))
            ->setMaxResults($pageSize);

        return $qb->getQuery();
    }

    /**
     * Query for estates listing
     * @var estateCategoryId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function getRentListingQuery($estateCategoryId, $locale, $page, $pageSize)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder(null);
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.estateCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('c.type = :rent')
            ->andWhere('t.slug IS NOT NULL');
            if ($estateCategoryId != null) {
                $qb
                ->andWhere('cat.id = :estateCategoryId')
                ->setParameter('estateCategoryId', $estateCategoryId)
                ;
            }
        $qb
            ->setParameter('rent', 'rent')
            ->setParameter('locale', $locale)
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($pageSize * ($page-1))
            ->setMaxResults($pageSize);

        return $qb->getQuery();
    }

    /**
     * Find all by category and locale
     * @var estateCategoryId integer
     * @var estateId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findSameCategoryEstates($estateCategoryId, $estateId, $locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.estateCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('cat.id = :estateCategoryId')
            ->andWhere('c.id != :estateId')
            ->setParameter('estateCategoryId', $estateCategoryId)
            ->setParameter('estateId', $estateId)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Find all by category and locale
     * @var estateCategoryId integer
     * @var estateId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findAllOnHomepageByCategoryAndLocale($estateCategoryId,$locale)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.estateCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('cat.id = :estateCategoryId')
            ->andWhere('c.isHomepage = 1')
            ->setParameter('estateCategoryId', $estateCategoryId)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ;
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function doSearch($params, $locale, $page, $pageSize = 20)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($pageSize * ($page-1))
            ->setMaxResults($pageSize);
        ;

        if (array_key_exists('number', $params) && !empty($params['number']) && is_numeric($params['number'])) {
            $qb
                ->andWhere('c.number = :number')
                ->setParameter('number', $params['number'])
            ;
        }

        if (array_key_exists('category', $params) && !empty($params['category']) && is_numeric($params['category'])) {
            $qb
                ->leftJoin('c.estateCategories', 'cat')
                ->andWhere('cat.id = :category')
                ->setParameter('category', (int)$params['category'])
            ;
        }

        if (array_key_exists('type', $params) && !empty($params['type']) && in_array($params['type'], array('sell', 'rent', 'buy'))) {
            $qb
                ->andWhere('c.type = :type')
                ->setParameter('type', $params['type'])
            ;
        }

        if (array_key_exists('location', $params) && !empty($params['location']) && is_numeric($params['location'])) {
            $qb
                ->andWhere('c.location = :location')
                ->setParameter('location', (int)$params['location'])
            ;
        }

        if (array_key_exists('min_beds', $params) && !empty($params['min_beds']) && is_numeric($params['min_beds'])) {
            $qb
                ->andWhere('c.beds >= :min_beds')
                ->setParameter('min_beds', (int)$params['min_beds'])
            ;
        }

        if (array_key_exists('max_beds', $params) && !empty($params['max_beds']) && is_numeric($params['max_beds'])) {
            $qb
                ->andWhere('c.beds <= :max_beds')
                ->setParameter('max_beds', (int)$params['max_beds'])
            ;
        }
        if (array_key_exists('min_price', $params) && !empty($params['min_price']) && is_numeric($params['min_price'])) {
            $qb
                ->andWhere('t.price >= :min_price')
                ->setParameter('min_price', (int)$params['min_price'])
            ;
        }

        if (array_key_exists('max_price', $params) && !empty($params['max_price']) && is_numeric($params['max_price'])) {
            $qb
                ->andWhere('t.price <= :max_price')
                ->setParameter('max_price', (int)$params['max_price'])
            ;
        }

        if (array_key_exists('min_area', $params) && !empty($params['min_area']) && is_numeric($params['min_area'])) {
            $qb
                ->andWhere('c.area >= :min_area')
                ->setParameter('min_area', (int)$params['min_area'])
            ;
        }

        if (array_key_exists('max_area', $params) && !empty($params['max_area']) && is_numeric($params['max_area'])) {
            $qb
                ->andWhere('c.area <= :max_area')
                ->setParameter('max_area', (int)$params['max_area'])
            ;
        }

        return $query = $qb->getQuery();
        return $query->getResult();
    }


}
